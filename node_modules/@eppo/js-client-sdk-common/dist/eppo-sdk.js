/*! For license information please see eppo-sdk.js.LICENSE.txt */
var eppo;(()=>{var t={487:t=>{var e={utf8:{stringToBytes:function(t){return e.bin.stringToBytes(unescape(encodeURIComponent(t)))},bytesToString:function(t){return decodeURIComponent(escape(e.bin.bytesToString(t)))}},bin:{stringToBytes:function(t){for(var e=[],s=0;s<t.length;s++)e.push(255&t.charCodeAt(s));return e},bytesToString:function(t){for(var e=[],s=0;s<t.length;s++)e.push(String.fromCharCode(t[s]));return e.join("")}}};t.exports=e},12:t=>{var e,s;e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s={rotl:function(t,e){return t<<e|t>>>32-e},rotr:function(t,e){return t<<32-e|t>>>e},endian:function(t){if(t.constructor==Number)return 16711935&s.rotl(t,8)|4278255360&s.rotl(t,24);for(var e=0;e<t.length;e++)t[e]=s.endian(t[e]);return t},randomBytes:function(t){for(var e=[];t>0;t--)e.push(Math.floor(256*Math.random()));return e},bytesToWords:function(t){for(var e=[],s=0,i=0;s<t.length;s++,i+=8)e[i>>>5]|=t[s]<<24-i%32;return e},wordsToBytes:function(t){for(var e=[],s=0;s<32*t.length;s+=8)e.push(t[s>>>5]>>>24-s%32&255);return e},bytesToHex:function(t){for(var e=[],s=0;s<t.length;s++)e.push((t[s]>>>4).toString(16)),e.push((15&t[s]).toString(16));return e.join("")},hexToBytes:function(t){for(var e=[],s=0;s<t.length;s+=2)e.push(parseInt(t.substr(s,2),16));return e},bytesToBase64:function(t){for(var s=[],i=0;i<t.length;i+=3)for(var n=t[i]<<16|t[i+1]<<8|t[i+2],r=0;r<4;r++)8*i+6*r<=8*t.length?s.push(e.charAt(n>>>6*(3-r)&63)):s.push("=");return s.join("")},base64ToBytes:function(t){t=t.replace(/[^A-Z0-9+\/]/gi,"");for(var s=[],i=0,n=0;i<t.length;n=++i%4)0!=n&&s.push((e.indexOf(t.charAt(i-1))&Math.pow(2,-2*n+8)-1)<<2*n|e.indexOf(t.charAt(i))>>>6-2*n);return s}},t.exports=s},738:t=>{function e(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}t.exports=function(t){return null!=t&&(e(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&e(t.slice(0,0))}(t)||!!t._isBuffer)}},568:(t,e,s)=>{var i,n,r,o,a;i=s(12),n=s(487).utf8,r=s(738),o=s(487).bin,(a=function(t,e){t.constructor==String?t=e&&"binary"===e.encoding?o.stringToBytes(t):n.stringToBytes(t):r(t)?t=Array.prototype.slice.call(t,0):Array.isArray(t)||t.constructor===Uint8Array||(t=t.toString());for(var s=i.bytesToWords(t),h=8*t.length,l=1732584193,c=-271733879,u=-1732584194,d=271733878,g=0;g<s.length;g++)s[g]=16711935&(s[g]<<8|s[g]>>>24)|4278255360&(s[g]<<24|s[g]>>>8);s[h>>>5]|=128<<h%32,s[14+(h+64>>>9<<4)]=h;var p=a._ff,f=a._gg,v=a._hh,y=a._ii;for(g=0;g<s.length;g+=16){var S=l,m=c,T=u,_=d;l=p(l,c,u,d,s[g+0],7,-680876936),d=p(d,l,c,u,s[g+1],12,-389564586),u=p(u,d,l,c,s[g+2],17,606105819),c=p(c,u,d,l,s[g+3],22,-1044525330),l=p(l,c,u,d,s[g+4],7,-176418897),d=p(d,l,c,u,s[g+5],12,1200080426),u=p(u,d,l,c,s[g+6],17,-1473231341),c=p(c,u,d,l,s[g+7],22,-45705983),l=p(l,c,u,d,s[g+8],7,1770035416),d=p(d,l,c,u,s[g+9],12,-1958414417),u=p(u,d,l,c,s[g+10],17,-42063),c=p(c,u,d,l,s[g+11],22,-1990404162),l=p(l,c,u,d,s[g+12],7,1804603682),d=p(d,l,c,u,s[g+13],12,-40341101),u=p(u,d,l,c,s[g+14],17,-1502002290),l=f(l,c=p(c,u,d,l,s[g+15],22,1236535329),u,d,s[g+1],5,-165796510),d=f(d,l,c,u,s[g+6],9,-1069501632),u=f(u,d,l,c,s[g+11],14,643717713),c=f(c,u,d,l,s[g+0],20,-373897302),l=f(l,c,u,d,s[g+5],5,-701558691),d=f(d,l,c,u,s[g+10],9,38016083),u=f(u,d,l,c,s[g+15],14,-660478335),c=f(c,u,d,l,s[g+4],20,-405537848),l=f(l,c,u,d,s[g+9],5,568446438),d=f(d,l,c,u,s[g+14],9,-1019803690),u=f(u,d,l,c,s[g+3],14,-187363961),c=f(c,u,d,l,s[g+8],20,1163531501),l=f(l,c,u,d,s[g+13],5,-1444681467),d=f(d,l,c,u,s[g+2],9,-51403784),u=f(u,d,l,c,s[g+7],14,1735328473),l=v(l,c=f(c,u,d,l,s[g+12],20,-1926607734),u,d,s[g+5],4,-378558),d=v(d,l,c,u,s[g+8],11,-2022574463),u=v(u,d,l,c,s[g+11],16,1839030562),c=v(c,u,d,l,s[g+14],23,-35309556),l=v(l,c,u,d,s[g+1],4,-1530992060),d=v(d,l,c,u,s[g+4],11,1272893353),u=v(u,d,l,c,s[g+7],16,-155497632),c=v(c,u,d,l,s[g+10],23,-1094730640),l=v(l,c,u,d,s[g+13],4,681279174),d=v(d,l,c,u,s[g+0],11,-358537222),u=v(u,d,l,c,s[g+3],16,-722521979),c=v(c,u,d,l,s[g+6],23,76029189),l=v(l,c,u,d,s[g+9],4,-640364487),d=v(d,l,c,u,s[g+12],11,-421815835),u=v(u,d,l,c,s[g+15],16,530742520),l=y(l,c=v(c,u,d,l,s[g+2],23,-995338651),u,d,s[g+0],6,-198630844),d=y(d,l,c,u,s[g+7],10,1126891415),u=y(u,d,l,c,s[g+14],15,-1416354905),c=y(c,u,d,l,s[g+5],21,-57434055),l=y(l,c,u,d,s[g+12],6,1700485571),d=y(d,l,c,u,s[g+3],10,-1894986606),u=y(u,d,l,c,s[g+10],15,-1051523),c=y(c,u,d,l,s[g+1],21,-2054922799),l=y(l,c,u,d,s[g+8],6,1873313359),d=y(d,l,c,u,s[g+15],10,-30611744),u=y(u,d,l,c,s[g+6],15,-1560198380),c=y(c,u,d,l,s[g+13],21,1309151649),l=y(l,c,u,d,s[g+4],6,-145523070),d=y(d,l,c,u,s[g+11],10,-1120210379),u=y(u,d,l,c,s[g+2],15,718787259),c=y(c,u,d,l,s[g+9],21,-343485551),l=l+S>>>0,c=c+m>>>0,u=u+T>>>0,d=d+_>>>0}return i.endian([l,c,u,d])})._ff=function(t,e,s,i,n,r,o){var a=t+(e&s|~e&i)+(n>>>0)+o;return(a<<r|a>>>32-r)+e},a._gg=function(t,e,s,i,n,r,o){var a=t+(e&i|s&~i)+(n>>>0)+o;return(a<<r|a>>>32-r)+e},a._hh=function(t,e,s,i,n,r,o){var a=t+(e^s^i)+(n>>>0)+o;return(a<<r|a>>>32-r)+e},a._ii=function(t,e,s,i,n,r,o){var a=t+(s^(e|~i))+(n>>>0)+o;return(a<<r|a>>>32-r)+e},a._blocksize=16,a._digestsize=16,t.exports=function(t,e){if(null==t)throw new Error("Illegal argument "+t);var s=i.wordsToBytes(a(t,e));return e&&e.asBytes?s:e&&e.asString?o.bytesToString(s):i.bytesToHex(s)}},78:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LRUAssignmentCache=e.NonExpiringAssignmentCache=e.AssignmentCache=void 0;const i=s(456);class n{constructor(t){this.cache=t}hasLoggedAssignment(t){return!!this.cache.has(this.getCacheKey(t))&&this.cache.get(this.getCacheKey(t))===t.variationValue.toHashedString()}setLastLoggedAssignment(t){this.cache.set(this.getCacheKey(t),t.variationValue.toHashedString())}getCacheKey({subjectKey:t,flagKey:e,allocationKey:s}){return[`subject:${t}`,`flag:${e}`,`allocation:${s}`].join(";")}}e.AssignmentCache=n;e.NonExpiringAssignmentCache=class extends n{constructor(){super(new Map)}};e.LRUAssignmentCache=class extends n{constructor(t){super(new i.LRUCache({max:t}))}}},476:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(568),n=s(78),r=s(601),o=s(725),a=s(606),h=s(116),l=s(996),c=s(472);e.default=class{constructor(t){this.configurationStore=t,this.queuedEvents=[],this.isGracefulFailureMode=!0}getAssignment(t,e,s={},i,n=!1){var r;try{return null!==(r=this.getAssignmentVariation(t,e,s,i,n).stringValue)&&void 0!==r?r:null}catch(t){return this.rethrowIfNotGraceful(t)}}getStringAssignment(t,e,s={},i,n=!1){var r;try{return null!==(r=this.getAssignmentVariation(t,e,s,i,n,o.ValueType.StringType).stringValue)&&void 0!==r?r:null}catch(t){return this.rethrowIfNotGraceful(t)}}getBoolAssignment(t,e,s={},i,n=!1){var r;try{return null!==(r=this.getAssignmentVariation(t,e,s,i,n,o.ValueType.BoolType).boolValue)&&void 0!==r?r:null}catch(t){return this.rethrowIfNotGraceful(t)}}getNumericAssignment(t,e,s,i,n=!1){var r;try{return null!==(r=this.getAssignmentVariation(t,e,s,i,n,o.ValueType.NumericType).numericValue)&&void 0!==r?r:null}catch(t){return this.rethrowIfNotGraceful(t)}}getJSONStringAssignment(t,e,s={},i,n=!1){var r;try{return null!==(r=this.getAssignmentVariation(t,e,s,i,n,o.ValueType.JSONType).stringValue)&&void 0!==r?r:null}catch(t){return this.rethrowIfNotGraceful(t)}}getParsedJSONAssignment(t,e,s={},i,n=!1){var r;try{return null!==(r=this.getAssignmentVariation(t,e,s,i,n,o.ValueType.JSONType).objectValue)&&void 0!==r?r:null}catch(t){return this.rethrowIfNotGraceful(t)}}rethrowIfNotGraceful(t){if(this.isGracefulFailureMode)return console.error(`[Eppo SDK] Error getting assignment: ${t.message}`),null;throw t}getAssignmentVariation(t,e,s={},i,n,r){const{allocationKey:o,assignment:a}=this.getAssignmentInternal(t,e,s,i,n,r);return null==i||i.onPostAssignment(e,t,a,o),a.isNullType()||null===o||this.logAssignment(e,o,a,t,s),a}getAssignmentInternal(t,e,s={},i,n,r){(0,c.validateNotBlank)(t,"Invalid argument: subjectKey cannot be blank"),(0,c.validateNotBlank)(e,"Invalid argument: flagKey cannot be blank");const u={allocationKey:null,assignment:o.EppoValue.Null()},d=this.configurationStore.get(n?(0,a.getMD5Hash)(e):e),g=this.getSubjectVariationOverride(t,d,r);if(!g.isNullType())return g.isExpectedType()?Object.assign(Object.assign({},u),{assignment:g}):u;if(!(null==d?void 0:d.enabled))return u;const p=null==i?void 0:i.onPreAssignment(e,t);if(null!=p)return p.isExpectedType()?Object.assign(Object.assign({},u),{assignment:p}):u;const f=(0,h.findMatchingRule)(s||{},d.rules,n);if(!f)return u;const v=d.allocations[f.allocationKey];if(!this.isInExperimentSample(t,e,d,v))return u;const{subjectShards:y}=d,{variations:S}=v,m=(0,l.getShard)(`assignment-${t}-${e}`,y),T=S.find((t=>(0,l.isShardInRange)(m,t.shardRange))),_={allocationKey:f.allocationKey,assignment:o.EppoValue.generateEppoValue(r,null==T?void 0:T.value,null==T?void 0:T.typedValue)};return _.assignment.isExpectedType()?_:u}setLogger(t){this.assignmentLogger=t,this.flushQueuedEvents()}disableAssignmentCache(){this.assignmentCache=void 0}useNonExpiringAssignmentCache(){this.assignmentCache=new n.NonExpiringAssignmentCache}useLRUAssignmentCache(t){this.assignmentCache=new n.LRUAssignmentCache(t)}setIsGracefulFailureMode(t){this.isGracefulFailureMode=t}flushQueuedEvents(){var t;const e=this.queuedEvents;this.queuedEvents=[];try{for(const s of e)null===(t=this.assignmentLogger)||void 0===t||t.logAssignment(s)}catch(t){console.error(`[Eppo SDK] Error flushing assignment events: ${t.message}`)}}logAssignment(t,e,s,i,n={}){var o,a;if(null===(o=this.assignmentCache)||void 0===o?void 0:o.hasLoggedAssignment({flagKey:t,subjectKey:i,allocationKey:e,variationValue:s}))return;const h={allocation:e,experiment:`${t}-${e}`,featureFlag:t,variation:s.toString(),timestamp:(new Date).toISOString(),subject:i,subjectAttributes:n};if(null!=this.assignmentLogger)try{this.assignmentLogger.logAssignment(h),null===(a=this.assignmentCache)||void 0===a||a.setLastLoggedAssignment({flagKey:t,subjectKey:i,allocationKey:e,variationValue:s})}catch(t){console.error(`[Eppo SDK] Error logging assignment event: ${t.message}`)}else this.queuedEvents.length<r.MAX_EVENT_QUEUE_SIZE&&this.queuedEvents.push(h)}getSubjectVariationOverride(t,e,s){const n=i(t),r=(null==e?void 0:e.overrides)&&e.overrides[n],a=(null==e?void 0:e.typedOverrides)&&e.typedOverrides[n];return o.EppoValue.generateEppoValue(s,r,a)}isInExperimentSample(t,e,s,i){const{subjectShards:n}=s,{percentExposure:r}=i;return(0,l.getShard)(`exposure-${t}-${e}`,n)<=r*n}}},601:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MAX_EVENT_QUEUE_SIZE=e.NULL_SENTINEL=e.SESSION_ASSIGNMENT_CONFIG_LOADED=e.BASE_URL=e.REQUEST_TIMEOUT_MILLIS=void 0,e.REQUEST_TIMEOUT_MILLIS=5e3,e.BASE_URL="https://fscdn.eppo.cloud/api",e.SESSION_ASSIGNMENT_CONFIG_LOADED="eppo-session-assignment-config-loaded",e.NULL_SENTINEL="EPPO_NULL",e.MAX_EVENT_QUEUE_SIZE=100},727:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OperatorType=void 0,function(t){t.MATCHES="MATCHES",t.GTE="GTE",t.GT="GT",t.LTE="LTE",t.LT="LT",t.ONE_OF="ONE_OF",t.NOT_ONE_OF="NOT_ONE_OF"}(e.OperatorType||(e.OperatorType={}))},725:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.EppoValue=e.ValueType=void 0;const i=s(606);var n;!function(t){t[t.NullType=0]="NullType",t[t.BoolType=1]="BoolType",t[t.NumericType=2]="NumericType",t[t.StringType=3]="StringType",t[t.JSONType=4]="JSONType"}(n=e.ValueType||(e.ValueType={}));class r{constructor(t,e,s,i,n){this.valueType=t,this.boolValue=e,this.numericValue=s,this.stringValue=i,this.objectValue=n}static generateEppoValue(t,e,s){if(null!=e&&null!=s)switch(t){case n.BoolType:return r.Bool(s);case n.NumericType:return r.Numeric(s);case n.StringType:return r.String(s);case n.JSONType:return r.JSON(e,s);default:return r.String(e)}return r.Null()}toString(){var t,e,s;switch(this.valueType){case n.NullType:return"null";case n.BoolType:return this.boolValue?"true":"false";case n.NumericType:return this.numericValue?this.numericValue.toString():"0";case n.StringType:return null!==(t=this.stringValue)&&void 0!==t?t:"";case n.JSONType:try{return null!==(e=JSON.stringify(this.objectValue))&&void 0!==e?e:""}catch(t){return null!==(s=this.stringValue)&&void 0!==s?s:""}}}toHashedString(){const t=this.toString();return(0,i.getMD5Hash)(t)}isExpectedType(){switch(this.valueType){case n.BoolType:return"boolean"==typeof this.boolValue;case n.NumericType:return"number"==typeof this.numericValue;case n.StringType:return"string"==typeof this.stringValue;case n.JSONType:try{return"object"==typeof this.objectValue&&"string"==typeof this.stringValue&&JSON.stringify(JSON.parse(this.stringValue))===JSON.stringify(this.objectValue)}catch(t){return!1}case n.NullType:return!1}}isNullType(){return this.valueType===n.NullType}static Bool(t){return new r(n.BoolType,t,void 0,void 0,void 0)}static Numeric(t){return new r(n.NumericType,void 0,t,void 0,void 0)}static String(t){return new r(n.StringType,void 0,void 0,t,void 0)}static JSON(t,e){return new r(n.JSONType,void 0,void 0,t,e)}static Null(){return new r(n.NullType,void 0,void 0,void 0,void 0)}}e.EppoValue=r},238:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=class{constructor(t,e){this.configurationStore=t,this.httpClient=e}async fetchAndStoreConfigurations(){const t=await this.httpClient.get("/randomized_assignment/v3/config");return t?(this.configurationStore.setEntries(t.flags),t.flags):{}}}},75:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HttpRequestError=void 0;class s extends Error{constructor(t,e){super(t),this.message=t,this.status=e}}e.HttpRequestError=s;e.default=class{constructor(t,e){this.axiosInstance=t,this.sdkParams=e}async get(t){try{return(await this.axiosInstance.get(t,{params:this.sdkParams})).data}catch(t){this.handleHttpError(t)}}handleHttpError(t){var e;const i=null===(e=null==t?void 0:t.response)||void 0===e?void 0:e.status;throw new s(t.message,i)}}},606:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.decodeBase64=e.encodeBase64=e.getMD5Hash=void 0;const i=s(568);e.getMD5Hash=function(t){return i(t)},e.encodeBase64=function(t){return Buffer.from(t,"utf8").toString("base64")},e.decodeBase64=function(t){return Buffer.from(t,"base64").toString("utf8")}},116:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.findMatchingRule=void 0;const i=s(727),n=s(606);function r(t,e,s){const r=function(t,e,s){return e.map((e=>s?function(t,e){const s=Object.entries(t).reduce(((t,[e,s])=>Object.assign({[(0,n.getMD5Hash)(e)]:s},t)),{})[e.attribute];if(null!=s)switch(e.operator){case(0,n.getMD5Hash)(i.OperatorType.GTE):return l(s,Number((0,n.decodeBase64)(e.value)),((t,e)=>t>=e));case(0,n.getMD5Hash)(i.OperatorType.GT):return l(s,Number((0,n.decodeBase64)(e.value)),((t,e)=>t>e));case(0,n.getMD5Hash)(i.OperatorType.LTE):return l(s,Number((0,n.decodeBase64)(e.value)),((t,e)=>t<=e));case(0,n.getMD5Hash)(i.OperatorType.LT):return l(s,Number((0,n.decodeBase64)(e.value)),((t,e)=>t<e));case(0,n.getMD5Hash)(i.OperatorType.MATCHES):return new RegExp((0,n.decodeBase64)(e.value)).test(s);case(0,n.getMD5Hash)(i.OperatorType.ONE_OF):return o((0,n.getMD5Hash)(s.toString().toLowerCase()),e.value);case(0,n.getMD5Hash)(i.OperatorType.NOT_ONE_OF):return a((0,n.getMD5Hash)(s.toString().toLowerCase()),e.value)}return!1}(t,e):function(t,e){const s=t[e.attribute];if(null!=s)switch(e.operator){case i.OperatorType.GTE:return l(s,e.value,((t,e)=>t>=e));case i.OperatorType.GT:return l(s,e.value,((t,e)=>t>e));case i.OperatorType.LTE:return l(s,e.value,((t,e)=>t<=e));case i.OperatorType.LT:return l(s,e.value,((t,e)=>t<e));case i.OperatorType.MATCHES:return new RegExp(e.value).test(s);case i.OperatorType.ONE_OF:return o(s.toString().toLowerCase(),e.value.map((t=>t.toLowerCase())));case i.OperatorType.NOT_ONE_OF:return a(s.toString().toLowerCase(),e.value.map((t=>t.toLowerCase())))}return!1}(t,e)))}(t,e.conditions,s);return!r.includes(!1)}function o(t,e){return h(t,e).length>0}function a(t,e){return 0===h(t,e).length}function h(t,e){return e.filter((e=>e===t))}function l(t,e,s){return"number"==typeof t&&"number"==typeof e&&s(t,e)}e.findMatchingRule=function(t,e,s){for(const i of e)if(r(t,i,s))return i;return null}},996:(t,e,s)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isShardInRange=e.getShard=void 0;const i=s(568);e.getShard=function(t,e){const s=i(t);return parseInt(s.slice(0,8),16)%e},e.isShardInRange=function(t,e){return t>=e.start&&t<e.end}},472:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.validateNotBlank=e.InvalidArgumentError=void 0;class s extends Error{}e.InvalidArgumentError=s,e.validateNotBlank=function(t,e){if(null==t||0===t.length)throw new s(e)}},456:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LRUCache=void 0;const s="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,i=new Set,n="object"==typeof process&&process?process:{},r=(t,e,s,i)=>{"function"==typeof n.emitWarning?n.emitWarning(t,e,s,i):console.error(`[${s}] ${e}: ${t}`)};let o=globalThis.AbortController,a=globalThis.AbortSignal;if(void 0===o){a=class{onabort;_onabort=[];reason;aborted=!1;addEventListener(t,e){this._onabort.push(e)}},o=class{constructor(){e()}signal=new a;abort(t){if(!this.signal.aborted){this.signal.reason=t,this.signal.aborted=!0;for(const e of this.signal._onabort)e(t);this.signal.onabort?.(t)}}};let t="1"!==n.env?.LRU_CACHE_IGNORE_AC_WARNING;const e=()=>{t&&(t=!1,r("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",e))}}Symbol("type");const h=t=>t&&t===Math.floor(t)&&t>0&&isFinite(t),l=t=>h(t)?t<=Math.pow(2,8)?Uint8Array:t<=Math.pow(2,16)?Uint16Array:t<=Math.pow(2,32)?Uint32Array:t<=Number.MAX_SAFE_INTEGER?c:null:null;class c extends Array{constructor(t){super(t),this.fill(0)}}class u{heap;length;static#t=!1;static create(t){const e=l(t);if(!e)return[];u.#t=!0;const s=new u(t,e);return u.#t=!1,s}constructor(t,e){if(!u.#t)throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new e(t),this.length=0}push(t){this.heap[this.length++]=t}pop(){return this.heap[--this.length]}}class d{#e;#s;#i;#n;#r;ttl;ttlResolution;ttlAutopurge;updateAgeOnGet;updateAgeOnHas;allowStale;noDisposeOnSet;noUpdateTTL;maxEntrySize;sizeCalculation;noDeleteOnFetchRejection;noDeleteOnStaleGet;allowStaleOnFetchAbort;allowStaleOnFetchRejection;ignoreFetchAbort;#o;#a;#h;#l;#c;#u;#d;#g;#p;#f;#v;#y;#S;#m;#T;#_;#A;static unsafeExposeInternals(t){return{starts:t.#S,ttls:t.#m,sizes:t.#y,keyMap:t.#h,keyList:t.#l,valList:t.#c,next:t.#u,prev:t.#d,get head(){return t.#g},get tail(){return t.#p},free:t.#f,isBackgroundFetch:e=>t.#b(e),backgroundFetch:(e,s,i,n)=>t.#E(e,s,i,n),moveToTail:e=>t.#O(e),indexes:e=>t.#L(e),rindexes:e=>t.#w(e),isStale:e=>t.#x(e)}}get max(){return this.#e}get maxSize(){return this.#s}get calculatedSize(){return this.#a}get size(){return this.#o}get fetchMethod(){return this.#r}get dispose(){return this.#i}get disposeAfter(){return this.#n}constructor(t){const{max:e=0,ttl:s,ttlResolution:n=1,ttlAutopurge:o,updateAgeOnGet:a,updateAgeOnHas:c,allowStale:g,dispose:p,disposeAfter:f,noDisposeOnSet:v,noUpdateTTL:y,maxSize:S=0,maxEntrySize:m=0,sizeCalculation:T,fetchMethod:_,noDeleteOnFetchRejection:A,noDeleteOnStaleGet:b,allowStaleOnFetchRejection:E,allowStaleOnFetchAbort:O,ignoreFetchAbort:L}=t;if(0!==e&&!h(e))throw new TypeError("max option must be a nonnegative integer");const w=e?l(e):Array;if(!w)throw new Error("invalid max value: "+e);if(this.#e=e,this.#s=S,this.maxEntrySize=m||this.#s,this.sizeCalculation=T,this.sizeCalculation){if(!this.#s&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw new TypeError("sizeCalculation set to non-function")}if(void 0!==_&&"function"!=typeof _)throw new TypeError("fetchMethod must be a function if specified");if(this.#r=_,this.#_=!!_,this.#h=new Map,this.#l=new Array(e).fill(void 0),this.#c=new Array(e).fill(void 0),this.#u=new w(e),this.#d=new w(e),this.#g=0,this.#p=0,this.#f=u.create(e),this.#o=0,this.#a=0,"function"==typeof p&&(this.#i=p),"function"==typeof f?(this.#n=f,this.#v=[]):(this.#n=void 0,this.#v=void 0),this.#T=!!this.#i,this.#A=!!this.#n,this.noDisposeOnSet=!!v,this.noUpdateTTL=!!y,this.noDeleteOnFetchRejection=!!A,this.allowStaleOnFetchRejection=!!E,this.allowStaleOnFetchAbort=!!O,this.ignoreFetchAbort=!!L,0!==this.maxEntrySize){if(0!==this.#s&&!h(this.#s))throw new TypeError("maxSize must be a positive integer if specified");if(!h(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.#z()}if(this.allowStale=!!g,this.noDeleteOnStaleGet=!!b,this.updateAgeOnGet=!!a,this.updateAgeOnHas=!!c,this.ttlResolution=h(n)||0===n?n:1,this.ttlAutopurge=!!o,this.ttl=s||0,this.ttl){if(!h(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.#F()}if(0===this.#e&&0===this.ttl&&0===this.#s)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.#e&&!this.#s){const t="LRU_CACHE_UNBOUNDED";if((t=>!i.has(t))(t)){i.add(t);r("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",t,d)}}}getRemainingTTL(t){return this.#h.has(t)?1/0:0}#F(){const t=new c(this.#e),e=new c(this.#e);this.#m=t,this.#S=e,this.#N=(i,n,r=s.now())=>{if(e[i]=0!==n?r:0,t[i]=n,0!==n&&this.ttlAutopurge){const t=setTimeout((()=>{this.#x(i)&&this.delete(this.#l[i])}),n+1);t.unref&&t.unref()}},this.#k=i=>{e[i]=0!==t[i]?s.now():0},this.#M=(s,r)=>{if(t[r]){const o=t[r],a=e[r];s.ttl=o,s.start=a,s.now=i||n();const h=s.now-a;s.remainingTTL=o-h}};let i=0;const n=()=>{const t=s.now();if(this.ttlResolution>0){i=t;const e=setTimeout((()=>i=0),this.ttlResolution);e.unref&&e.unref()}return t};this.getRemainingTTL=s=>{const r=this.#h.get(s);if(void 0===r)return 0;const o=t[r],a=e[r];if(0===o||0===a)return 1/0;return o-((i||n())-a)},this.#x=s=>0!==t[s]&&0!==e[s]&&(i||n())-e[s]>t[s]}#k=()=>{};#M=()=>{};#N=()=>{};#x=()=>!1;#z(){const t=new c(this.#e);this.#a=0,this.#y=t,this.#C=e=>{this.#a-=t[e],t[e]=0},this.#D=(t,e,s,i)=>{if(this.#b(e))return 0;if(!h(s)){if(!i)throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");if("function"!=typeof i)throw new TypeError("sizeCalculation must be a function");if(s=i(e,t),!h(s))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}return s},this.#I=(e,s,i)=>{if(t[e]=s,this.#s){const s=this.#s-t[e];for(;this.#a>s;)this.#B(!0)}this.#a+=t[e],i&&(i.entrySize=s,i.totalCalculatedSize=this.#a)}}#C=t=>{};#I=(t,e,s)=>{};#D=(t,e,s,i)=>{if(s||i)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0};*#L({allowStale:t=this.allowStale}={}){if(this.#o)for(let e=this.#p;this.#R(e)&&(!t&&this.#x(e)||(yield e),e!==this.#g);)e=this.#d[e]}*#w({allowStale:t=this.allowStale}={}){if(this.#o)for(let e=this.#g;this.#R(e)&&(!t&&this.#x(e)||(yield e),e!==this.#p);)e=this.#u[e]}#R(t){return void 0!==t&&this.#h.get(this.#l[t])===t}*entries(){for(const t of this.#L())void 0===this.#c[t]||void 0===this.#l[t]||this.#b(this.#c[t])||(yield[this.#l[t],this.#c[t]])}*rentries(){for(const t of this.#w())void 0===this.#c[t]||void 0===this.#l[t]||this.#b(this.#c[t])||(yield[this.#l[t],this.#c[t]])}*keys(){for(const t of this.#L()){const e=this.#l[t];void 0===e||this.#b(this.#c[t])||(yield e)}}*rkeys(){for(const t of this.#w()){const e=this.#l[t];void 0===e||this.#b(this.#c[t])||(yield e)}}*values(){for(const t of this.#L()){void 0===this.#c[t]||this.#b(this.#c[t])||(yield this.#c[t])}}*rvalues(){for(const t of this.#w()){void 0===this.#c[t]||this.#b(this.#c[t])||(yield this.#c[t])}}[Symbol.iterator](){return this.entries()}find(t,e={}){for(const s of this.#L()){const i=this.#c[s],n=this.#b(i)?i.__staleWhileFetching:i;if(void 0!==n&&t(n,this.#l[s],this))return this.get(this.#l[s],e)}}forEach(t,e=this){for(const s of this.#L()){const i=this.#c[s],n=this.#b(i)?i.__staleWhileFetching:i;void 0!==n&&t.call(e,n,this.#l[s],this)}}rforEach(t,e=this){for(const s of this.#w()){const i=this.#c[s],n=this.#b(i)?i.__staleWhileFetching:i;void 0!==n&&t.call(e,n,this.#l[s],this)}}purgeStale(){let t=!1;for(const e of this.#w({allowStale:!0}))this.#x(e)&&(this.delete(this.#l[e]),t=!0);return t}dump(){const t=[];for(const e of this.#L({allowStale:!0})){const i=this.#l[e],n=this.#c[e],r=this.#b(n)?n.__staleWhileFetching:n;if(void 0===r||void 0===i)continue;const o={value:r};if(this.#m&&this.#S){o.ttl=this.#m[e];const t=s.now()-this.#S[e];o.start=Math.floor(Date.now()-t)}this.#y&&(o.size=this.#y[e]),t.unshift([i,o])}return t}load(t){this.clear();for(const[e,i]of t){if(i.start){const t=Date.now()-i.start;i.start=s.now()-t}this.set(e,i.value,i)}}set(t,e,s={}){if(void 0===e)return this.delete(t),this;const{ttl:i=this.ttl,start:n,noDisposeOnSet:r=this.noDisposeOnSet,sizeCalculation:o=this.sizeCalculation,status:a}=s;let{noUpdateTTL:h=this.noUpdateTTL}=s;const l=this.#D(t,e,s.size||0,o);if(this.maxEntrySize&&l>this.maxEntrySize)return a&&(a.set="miss",a.maxEntrySizeExceeded=!0),this.delete(t),this;let c=0===this.#o?void 0:this.#h.get(t);if(void 0===c)c=0===this.#o?this.#p:0!==this.#f.length?this.#f.pop():this.#o===this.#e?this.#B(!1):this.#o,this.#l[c]=t,this.#c[c]=e,this.#h.set(t,c),this.#u[this.#p]=c,this.#d[c]=this.#p,this.#p=c,this.#o++,this.#I(c,l,a),a&&(a.set="add"),h=!1;else{this.#O(c);const s=this.#c[c];if(e!==s){if(this.#_&&this.#b(s)){s.__abortController.abort(new Error("replaced"));const{__staleWhileFetching:e}=s;void 0===e||r||(this.#T&&this.#i?.(e,t,"set"),this.#A&&this.#v?.push([e,t,"set"]))}else r||(this.#T&&this.#i?.(s,t,"set"),this.#A&&this.#v?.push([s,t,"set"]));if(this.#C(c),this.#I(c,l,a),this.#c[c]=e,a){a.set="replace";const t=s&&this.#b(s)?s.__staleWhileFetching:s;void 0!==t&&(a.oldValue=t)}}else a&&(a.set="update")}if(0===i||this.#m||this.#F(),this.#m&&(h||this.#N(c,i,n),a&&this.#M(a,c)),!r&&this.#A&&this.#v){const t=this.#v;let e;for(;e=t?.shift();)this.#n?.(...e)}return this}pop(){try{for(;this.#o;){const t=this.#c[this.#g];if(this.#B(!0),this.#b(t)){if(t.__staleWhileFetching)return t.__staleWhileFetching}else if(void 0!==t)return t}}finally{if(this.#A&&this.#v){const t=this.#v;let e;for(;e=t?.shift();)this.#n?.(...e)}}}#B(t){const e=this.#g,s=this.#l[e],i=this.#c[e];return this.#_&&this.#b(i)?i.__abortController.abort(new Error("evicted")):(this.#T||this.#A)&&(this.#T&&this.#i?.(i,s,"evict"),this.#A&&this.#v?.push([i,s,"evict"])),this.#C(e),t&&(this.#l[e]=void 0,this.#c[e]=void 0,this.#f.push(e)),1===this.#o?(this.#g=this.#p=0,this.#f.length=0):this.#g=this.#u[e],this.#h.delete(s),this.#o--,e}has(t,e={}){const{updateAgeOnHas:s=this.updateAgeOnHas,status:i}=e,n=this.#h.get(t);if(void 0!==n){const t=this.#c[n];if(this.#b(t)&&void 0===t.__staleWhileFetching)return!1;if(!this.#x(n))return s&&this.#k(n),i&&(i.has="hit",this.#M(i,n)),!0;i&&(i.has="stale",this.#M(i,n))}else i&&(i.has="miss");return!1}peek(t,e={}){const{allowStale:s=this.allowStale}=e,i=this.#h.get(t);if(void 0!==i&&(s||!this.#x(i))){const t=this.#c[i];return this.#b(t)?t.__staleWhileFetching:t}}#E(t,e,s,i){const n=void 0===e?void 0:this.#c[e];if(this.#b(n))return n;const r=new o,{signal:a}=s;a?.addEventListener("abort",(()=>r.abort(a.reason)),{signal:r.signal});const h={signal:r.signal,options:s,context:i},l=(i,n=!1)=>{const{aborted:o}=r.signal,a=s.ignoreFetchAbort&&void 0!==i;if(s.status&&(o&&!n?(s.status.fetchAborted=!0,s.status.fetchError=r.signal.reason,a&&(s.status.fetchAbortIgnored=!0)):s.status.fetchResolved=!0),o&&!a&&!n)return c(r.signal.reason);const l=u;return this.#c[e]===u&&(void 0===i?l.__staleWhileFetching?this.#c[e]=l.__staleWhileFetching:this.delete(t):(s.status&&(s.status.fetchUpdated=!0),this.set(t,i,h.options))),i},c=i=>{const{aborted:n}=r.signal,o=n&&s.allowStaleOnFetchAbort,a=o||s.allowStaleOnFetchRejection,h=a||s.noDeleteOnFetchRejection,l=u;if(this.#c[e]===u){!h||void 0===l.__staleWhileFetching?this.delete(t):o||(this.#c[e]=l.__staleWhileFetching)}if(a)return s.status&&void 0!==l.__staleWhileFetching&&(s.status.returnedStale=!0),l.__staleWhileFetching;if(l.__returned===l)throw i};s.status&&(s.status.fetchDispatched=!0);const u=new Promise(((e,i)=>{const o=this.#r?.(t,n,h);o&&o instanceof Promise&&o.then((t=>e(void 0===t?void 0:t)),i),r.signal.addEventListener("abort",(()=>{s.ignoreFetchAbort&&!s.allowStaleOnFetchAbort||(e(void 0),s.allowStaleOnFetchAbort&&(e=t=>l(t,!0)))}))})).then(l,(t=>(s.status&&(s.status.fetchRejected=!0,s.status.fetchError=t),c(t)))),d=Object.assign(u,{__abortController:r,__staleWhileFetching:n,__returned:void 0});return void 0===e?(this.set(t,d,{...h.options,status:void 0}),e=this.#h.get(t)):this.#c[e]=d,d}#b(t){if(!this.#_)return!1;const e=t;return!!e&&e instanceof Promise&&e.hasOwnProperty("__staleWhileFetching")&&e.__abortController instanceof o}async fetch(t,e={}){const{allowStale:s=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:n=this.noDeleteOnStaleGet,ttl:r=this.ttl,noDisposeOnSet:o=this.noDisposeOnSet,size:a=0,sizeCalculation:h=this.sizeCalculation,noUpdateTTL:l=this.noUpdateTTL,noDeleteOnFetchRejection:c=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:u=this.allowStaleOnFetchRejection,ignoreFetchAbort:d=this.ignoreFetchAbort,allowStaleOnFetchAbort:g=this.allowStaleOnFetchAbort,context:p,forceRefresh:f=!1,status:v,signal:y}=e;if(!this.#_)return v&&(v.fetch="get"),this.get(t,{allowStale:s,updateAgeOnGet:i,noDeleteOnStaleGet:n,status:v});const S={allowStale:s,updateAgeOnGet:i,noDeleteOnStaleGet:n,ttl:r,noDisposeOnSet:o,size:a,sizeCalculation:h,noUpdateTTL:l,noDeleteOnFetchRejection:c,allowStaleOnFetchRejection:u,allowStaleOnFetchAbort:g,ignoreFetchAbort:d,status:v,signal:y};let m=this.#h.get(t);if(void 0===m){v&&(v.fetch="miss");const e=this.#E(t,m,S,p);return e.__returned=e}{const e=this.#c[m];if(this.#b(e)){const t=s&&void 0!==e.__staleWhileFetching;return v&&(v.fetch="inflight",t&&(v.returnedStale=!0)),t?e.__staleWhileFetching:e.__returned=e}const n=this.#x(m);if(!f&&!n)return v&&(v.fetch="hit"),this.#O(m),i&&this.#k(m),v&&this.#M(v,m),e;const r=this.#E(t,m,S,p),o=void 0!==r.__staleWhileFetching&&s;return v&&(v.fetch=n?"stale":"refresh",o&&n&&(v.returnedStale=!0)),o?r.__staleWhileFetching:r.__returned=r}}get(t,e={}){const{allowStale:s=this.allowStale,updateAgeOnGet:i=this.updateAgeOnGet,noDeleteOnStaleGet:n=this.noDeleteOnStaleGet,status:r}=e,o=this.#h.get(t);if(void 0!==o){const e=this.#c[o],a=this.#b(e);return r&&this.#M(r,o),this.#x(o)?(r&&(r.get="stale"),a?(r&&s&&void 0!==e.__staleWhileFetching&&(r.returnedStale=!0),s?e.__staleWhileFetching:void 0):(n||this.delete(t),r&&s&&(r.returnedStale=!0),s?e:void 0)):(r&&(r.get="hit"),a?e.__staleWhileFetching:(this.#O(o),i&&this.#k(o),e))}r&&(r.get="miss")}#V(t,e){this.#d[e]=t,this.#u[t]=e}#O(t){t!==this.#p&&(t===this.#g?this.#g=this.#u[t]:this.#V(this.#d[t],this.#u[t]),this.#V(this.#p,t),this.#p=t)}delete(t){let e=!1;if(0!==this.#o){const s=this.#h.get(t);if(void 0!==s)if(e=!0,1===this.#o)this.clear();else{this.#C(s);const e=this.#c[s];this.#b(e)?e.__abortController.abort(new Error("deleted")):(this.#T||this.#A)&&(this.#T&&this.#i?.(e,t,"delete"),this.#A&&this.#v?.push([e,t,"delete"])),this.#h.delete(t),this.#l[s]=void 0,this.#c[s]=void 0,s===this.#p?this.#p=this.#d[s]:s===this.#g?this.#g=this.#u[s]:(this.#u[this.#d[s]]=this.#u[s],this.#d[this.#u[s]]=this.#d[s]),this.#o--,this.#f.push(s)}}if(this.#A&&this.#v?.length){const t=this.#v;let e;for(;e=t?.shift();)this.#n?.(...e)}return e}clear(){for(const t of this.#w({allowStale:!0})){const e=this.#c[t];if(this.#b(e))e.__abortController.abort(new Error("deleted"));else{const s=this.#l[t];this.#T&&this.#i?.(e,s,"delete"),this.#A&&this.#v?.push([e,s,"delete"])}}if(this.#h.clear(),this.#c.fill(void 0),this.#l.fill(void 0),this.#m&&this.#S&&(this.#m.fill(0),this.#S.fill(0)),this.#y&&this.#y.fill(0),this.#g=0,this.#p=0,this.#f.length=0,this.#a=0,this.#o=0,this.#A&&this.#v){const t=this.#v;let e;for(;e=t?.shift();)this.#n?.(...e)}}}e.LRUCache=d}},e={};function s(i){var n=e[i];if(void 0!==n)return n.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,s),r.exports}var i={};(()=>{"use strict";var t=i;Object.defineProperty(t,"__esModule",{value:!0}),t.validation=t.HttpClient=t.ExperimentConfigurationRequestor=t.constants=t.EppoClient=void 0;const e=s(476);t.EppoClient=e.default;const n=s(601);t.constants=n;const r=s(238);t.ExperimentConfigurationRequestor=r.default;const o=s(75);t.HttpClient=o.default;const a=s(472);t.validation=a})(),eppo=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,