"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EppoValue = exports.ValueType = void 0;
const obfuscation_1 = require("./obfuscation");
var ValueType;
(function (ValueType) {
    ValueType[ValueType["NullType"] = 0] = "NullType";
    ValueType[ValueType["BoolType"] = 1] = "BoolType";
    ValueType[ValueType["NumericType"] = 2] = "NumericType";
    ValueType[ValueType["StringType"] = 3] = "StringType";
    ValueType[ValueType["JSONType"] = 4] = "JSONType";
})(ValueType = exports.ValueType || (exports.ValueType = {}));
class EppoValue {
    constructor(valueType, boolValue, numericValue, stringValue, objectValue) {
        this.valueType = valueType;
        this.boolValue = boolValue;
        this.numericValue = numericValue;
        this.stringValue = stringValue;
        this.objectValue = objectValue;
    }
    static generateEppoValue(expectedValueType, value, typedValue) {
        if (value != null && typedValue != null) {
            switch (expectedValueType) {
                case ValueType.BoolType:
                    return EppoValue.Bool(typedValue);
                case ValueType.NumericType:
                    return EppoValue.Numeric(typedValue);
                case ValueType.StringType:
                    return EppoValue.String(typedValue);
                case ValueType.JSONType:
                    return EppoValue.JSON(value, typedValue);
                default:
                    return EppoValue.String(value);
            }
        }
        return EppoValue.Null();
    }
    toString() {
        var _a, _b, _c;
        switch (this.valueType) {
            case ValueType.NullType:
                return 'null';
            case ValueType.BoolType:
                return this.boolValue ? 'true' : 'false';
            case ValueType.NumericType:
                return this.numericValue ? this.numericValue.toString() : '0';
            case ValueType.StringType:
                return (_a = this.stringValue) !== null && _a !== void 0 ? _a : '';
            case ValueType.JSONType:
                try {
                    return (_b = JSON.stringify(this.objectValue)) !== null && _b !== void 0 ? _b : '';
                }
                catch (_d) {
                    return (_c = this.stringValue) !== null && _c !== void 0 ? _c : '';
                }
        }
    }
    /**
     * Useful when storing or transmitting the entire value,
     * in particular the JsonType, is not desired.
     *
     * @returns MD5 hashed string of the value
     */
    toHashedString() {
        const value = this.toString();
        return (0, obfuscation_1.getMD5Hash)(value);
    }
    isExpectedType() {
        switch (this.valueType) {
            case ValueType.BoolType:
                return typeof this.boolValue === 'boolean';
            case ValueType.NumericType:
                return typeof this.numericValue === 'number';
            case ValueType.StringType:
                return typeof this.stringValue === 'string';
            case ValueType.JSONType:
                try {
                    return (typeof this.objectValue === 'object' &&
                        typeof this.stringValue === 'string' &&
                        JSON.stringify(JSON.parse(this.stringValue)) === JSON.stringify(this.objectValue));
                }
                catch (_a) {
                    return false;
                }
            case ValueType.NullType:
                return false;
        }
    }
    isNullType() {
        return this.valueType === ValueType.NullType;
    }
    static Bool(value) {
        return new EppoValue(ValueType.BoolType, value, undefined, undefined, undefined);
    }
    static Numeric(value) {
        return new EppoValue(ValueType.NumericType, undefined, value, undefined, undefined);
    }
    static String(value) {
        return new EppoValue(ValueType.StringType, undefined, undefined, value, undefined);
    }
    static JSON(value, typedValue) {
        return new EppoValue(ValueType.JSONType, undefined, undefined, value, typedValue);
    }
    static Null() {
        return new EppoValue(ValueType.NullType, undefined, undefined, undefined, undefined);
    }
}
exports.EppoValue = EppoValue;
//# sourceMappingURL=eppo_value.js.map