import { IAssignmentHooks } from '../assignment-hooks';
import { IAssignmentLogger } from '../assignment-logger';
import { IConfigurationStore } from '../configuration-store';
import { EppoValue } from '../eppo_value';
/**
 * Client for assigning experiment variations.
 * @public
 */
export interface IEppoClient {
    /**
     * Maps a subject to a variation for a given experiment.
     *
     * @param subjectKey an identifier of the experiment subject, for example a user ID.
     * @param flagKey feature flag identifier
     * @param subjectAttributes optional attributes associated with the subject, for example name and email.
     * The subject attributes are used for evaluating any targeting rules tied to the experiment.
     * @param assignmentHooks optional interface for pre and post assignment hooks
     * @returns a variation value if the subject is part of the experiment sample, otherwise null
     * @public
     */
    getAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks): string | null;
    /**
     * Maps a subject to a variation for a given experiment.
     *
     * @param subjectKey an identifier of the experiment subject, for example a user ID.
     * @param flagKey feature flag identifier
     * @param subjectAttributes optional attributes associated with the subject, for example name and email.
     * The subject attributes are used for evaluating any targeting rules tied to the experiment.
     * @returns a variation value if the subject is part of the experiment sample, otherwise null
     * @public
     */
    getStringAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks): string | null;
    getBoolAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks): boolean | null;
    getNumericAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks): number | null;
    getJSONStringAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks): string | null;
    getParsedJSONAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks): object | null;
}
export default class EppoClient implements IEppoClient {
    private configurationStore;
    private queuedEvents;
    private assignmentLogger;
    private isGracefulFailureMode;
    private assignmentCache;
    constructor(configurationStore: IConfigurationStore);
    getAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks | undefined, obfuscated?: boolean): string | null;
    getStringAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks | undefined, obfuscated?: boolean): string | null;
    getBoolAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks | undefined, obfuscated?: boolean): boolean | null;
    getNumericAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, EppoValue>, assignmentHooks?: IAssignmentHooks | undefined, obfuscated?: boolean): number | null;
    getJSONStringAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks | undefined, obfuscated?: boolean): string | null;
    getParsedJSONAssignment(subjectKey: string, flagKey: string, subjectAttributes?: Record<string, any>, assignmentHooks?: IAssignmentHooks | undefined, obfuscated?: boolean): object | null;
    private rethrowIfNotGraceful;
    private getAssignmentVariation;
    private getAssignmentInternal;
    setLogger(logger: IAssignmentLogger): void;
    /**
     * Assignment cache methods.
     */
    disableAssignmentCache(): void;
    useNonExpiringAssignmentCache(): void;
    useLRUAssignmentCache(maxSize: number): void;
    setIsGracefulFailureMode(gracefulFailureMode: boolean): void;
    private flushQueuedEvents;
    private logAssignment;
    private getSubjectVariationOverride;
    /**
     * This checks whether the subject is included in the experiment sample.
     * It is used to determine whether the subject should be assigned to a variant.
     * Given a hash function output (bucket), check whether the bucket is between 0 and exposure_percent * total_buckets.
     */
    private isInExperimentSample;
}
//# sourceMappingURL=eppo-client.d.ts.map