export declare enum ValueType {
    NullType = 0,
    BoolType = 1,
    NumericType = 2,
    StringType = 3,
    JSONType = 4
}
export declare type IValue = boolean | number | string | undefined;
export declare class EppoValue {
    valueType: ValueType;
    boolValue: boolean | undefined;
    numericValue: number | undefined;
    stringValue: string | undefined;
    objectValue: object | undefined;
    private constructor();
    static generateEppoValue(expectedValueType?: ValueType, value?: string, typedValue?: boolean | number | string | object): EppoValue;
    toString(): string;
    /**
     * Useful when storing or transmitting the entire value,
     * in particular the JsonType, is not desired.
     *
     * @returns MD5 hashed string of the value
     */
    toHashedString(): string;
    isExpectedType(): boolean;
    isNullType(): boolean;
    static Bool(value: boolean): EppoValue;
    static Numeric(value: number): EppoValue;
    static String(value: string): EppoValue;
    static JSON(value: string, typedValue: object): EppoValue;
    static Null(): EppoValue;
}
//# sourceMappingURL=eppo_value.d.ts.map