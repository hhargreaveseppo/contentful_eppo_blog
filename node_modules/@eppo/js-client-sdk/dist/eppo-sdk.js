/*! For license information please see eppo-sdk.js.LICENSE.txt */
var eppo;(()=>{var e={2665:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(2568),s=r(4216),o=r(8014),i=r(778),a=r(7370),u=r(1112),c=r(5751);t.default=class{constructor(e){this.configurationStore=e,this.queuedEvents=[],this.isGracefulFailureMode=!0}getAssignment(e,t,r={},n,s=!1){var o;try{return null!==(o=this.getAssignmentVariation(e,t,r,n,s).stringValue)&&void 0!==o?o:null}catch(e){return this.rethrowIfNotGraceful(e)}}getStringAssignment(e,t,r={},n,s=!1){var i;try{return null!==(i=this.getAssignmentVariation(e,t,r,n,s,o.ValueType.StringType).stringValue)&&void 0!==i?i:null}catch(e){return this.rethrowIfNotGraceful(e)}}getBoolAssignment(e,t,r={},n,s=!1){var i;try{return null!==(i=this.getAssignmentVariation(e,t,r,n,s,o.ValueType.BoolType).boolValue)&&void 0!==i?i:null}catch(e){return this.rethrowIfNotGraceful(e)}}getNumericAssignment(e,t,r,n,s=!1){var i;try{return null!==(i=this.getAssignmentVariation(e,t,r,n,s,o.ValueType.NumericType).numericValue)&&void 0!==i?i:null}catch(e){return this.rethrowIfNotGraceful(e)}}getJSONStringAssignment(e,t,r={},n,s=!1){var i;try{return null!==(i=this.getAssignmentVariation(e,t,r,n,s,o.ValueType.JSONType).stringValue)&&void 0!==i?i:null}catch(e){return this.rethrowIfNotGraceful(e)}}getParsedJSONAssignment(e,t,r={},n,s=!1){var i;try{return null!==(i=this.getAssignmentVariation(e,t,r,n,s,o.ValueType.JSONType).objectValue)&&void 0!==i?i:null}catch(e){return this.rethrowIfNotGraceful(e)}}rethrowIfNotGraceful(e){if(this.isGracefulFailureMode)return console.error(`[Eppo SDK] Error getting assignment: ${e.message}`),null;throw e}getAssignmentVariation(e,t,r={},n,s,o){const{allocationKey:i,assignment:a}=this.getAssignmentInternal(e,t,r,n,s,o);return null==n||n.onPostAssignment(t,e,a,i),a.isNullType()||null===i||this.logAssignment(t,i,a,e,r),a}getAssignmentInternal(e,t,r={},n,s,l){(0,c.validateNotBlank)(e,"Invalid argument: subjectKey cannot be blank"),(0,c.validateNotBlank)(t,"Invalid argument: flagKey cannot be blank");const p={allocationKey:null,assignment:o.EppoValue.Null()},f=this.configurationStore.get(s?(0,i.getMD5Hash)(t):t),d=this.getSubjectVariationOverride(e,f,l);if(!d.isNullType())return d.isExpectedType()?Object.assign(Object.assign({},p),{assignment:d}):p;if(!(null==f?void 0:f.enabled))return p;const h=null==n?void 0:n.onPreAssignment(t,e);if(null!=h)return h.isExpectedType()?Object.assign(Object.assign({},p),{assignment:h}):p;const g=(0,a.findMatchingRule)(r||{},f.rules,s);if(!g)return p;const m=f.allocations[g.allocationKey];if(!this.isInExperimentSample(e,t,f,m))return p;const{subjectShards:v}=f,{variations:y}=m,E=(0,u.getShard)(`assignment-${e}-${t}`,v),O=y.find((e=>(0,u.isShardInRange)(E,e.shardRange))),S={allocationKey:g.allocationKey,assignment:o.EppoValue.generateEppoValue(l,null==O?void 0:O.value,null==O?void 0:O.typedValue)};return S.assignment.isExpectedType()?S:p}setLogger(e){this.assignmentLogger=e,this.flushQueuedEvents()}setIsGracefulFailureMode(e){this.isGracefulFailureMode=e}flushQueuedEvents(){var e;const t=this.queuedEvents;this.queuedEvents=[];try{for(const r of t)null===(e=this.assignmentLogger)||void 0===e||e.logAssignment(r)}catch(e){console.error(`[Eppo SDK] Error flushing assignment events: ${e.message}`)}}logAssignment(e,t,r,n,o={}){const i={allocation:t,experiment:`${e}-${t}`,featureFlag:e,variation:r.toString(),timestamp:(new Date).toISOString(),subject:n,subjectAttributes:o};if(null!=this.assignmentLogger)try{this.assignmentLogger.logAssignment(i)}catch(e){console.error(`[Eppo SDK] Error logging assignment event: ${e.message}`)}else this.queuedEvents.length<s.MAX_EVENT_QUEUE_SIZE&&this.queuedEvents.push(i)}getSubjectVariationOverride(e,t,r){const s=n(e),i=(null==t?void 0:t.overrides)&&t.overrides[s],a=(null==t?void 0:t.typedOverrides)&&t.typedOverrides[s];return o.EppoValue.generateEppoValue(r,i,a)}isInExperimentSample(e,t,r,n){const{subjectShards:s}=r,{percentExposure:o}=n;return(0,u.getShard)(`exposure-${e}-${t}`,s)<=o*s}}},4216:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MAX_EVENT_QUEUE_SIZE=t.NULL_SENTINEL=t.SESSION_ASSIGNMENT_CONFIG_LOADED=t.BASE_URL=t.REQUEST_TIMEOUT_MILLIS=void 0,t.REQUEST_TIMEOUT_MILLIS=5e3,t.BASE_URL="https://fscdn.eppo.cloud/api",t.SESSION_ASSIGNMENT_CONFIG_LOADED="eppo-session-assignment-config-loaded",t.NULL_SENTINEL="EPPO_NULL",t.MAX_EVENT_QUEUE_SIZE=100},8186:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorType=void 0,function(e){e.MATCHES="MATCHES",e.GTE="GTE",e.GT="GT",e.LTE="LTE",e.LT="LT",e.ONE_OF="ONE_OF",e.NOT_ONE_OF="NOT_ONE_OF"}(t.OperatorType||(t.OperatorType={}))},8014:(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.EppoValue=t.ValueType=void 0,function(e){e[e.NullType=0]="NullType",e[e.BoolType=1]="BoolType",e[e.NumericType=2]="NumericType",e[e.StringType=3]="StringType",e[e.JSONType=4]="JSONType"}(r=t.ValueType||(t.ValueType={}));class n{constructor(e,t,r,n,s){this.valueType=e,this.boolValue=t,this.numericValue=r,this.stringValue=n,this.objectValue=s}static generateEppoValue(e,t,s){if(null!=t&&null!=s)switch(e){case r.BoolType:return n.Bool(s);case r.NumericType:return n.Numeric(s);case r.StringType:return n.String(s);case r.JSONType:return n.JSON(t,s);default:return n.String(t)}return n.Null()}toString(){var e,t,n;switch(this.valueType){case r.NullType:return"null";case r.BoolType:return this.boolValue?"true":"false";case r.NumericType:return this.numericValue?this.numericValue.toString():"0";case r.StringType:return null!==(e=this.stringValue)&&void 0!==e?e:"";case r.JSONType:try{return null!==(t=JSON.stringify(this.objectValue))&&void 0!==t?t:""}catch(e){return null!==(n=this.stringValue)&&void 0!==n?n:""}}}isExpectedType(){switch(this.valueType){case r.BoolType:return"boolean"==typeof this.boolValue;case r.NumericType:return"number"==typeof this.numericValue;case r.StringType:return"string"==typeof this.stringValue;case r.JSONType:try{return"object"==typeof this.objectValue&&"string"==typeof this.stringValue&&JSON.stringify(JSON.parse(this.stringValue))===JSON.stringify(this.objectValue)}catch(e){return!1}case r.NullType:return!1}}isNullType(){return this.valueType===r.NullType}static Bool(e){return new n(r.BoolType,e,void 0,void 0,void 0)}static Numeric(e){return new n(r.NumericType,void 0,e,void 0,void 0)}static String(e){return new n(r.StringType,void 0,void 0,e,void 0)}static JSON(e,t){return new n(r.JSONType,void 0,void 0,e,t)}static Null(){return new n(r.NullType,void 0,void 0,void 0,void 0)}}t.EppoValue=n},5856:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.configurationStore=e,this.httpClient=t}async fetchAndStoreConfigurations(){const e=await this.httpClient.get("/randomized_assignment/v3/config");return e?(this.configurationStore.setEntries(e.flags),e.flags):{}}}},1506:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HttpRequestError=void 0;class r extends Error{constructor(e,t){super(e),this.message=e,this.status=t}}t.HttpRequestError=r;t.default=class{constructor(e,t){this.axiosInstance=e,this.sdkParams=t}async get(e){try{return(await this.axiosInstance.get(e,{params:this.sdkParams})).data}catch(e){this.handleHttpError(e)}}handleHttpError(e){var t;const n=null===(t=null==e?void 0:e.response)||void 0===t?void 0:t.status;throw new r(e.message,n)}}},5541:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validation=t.HttpClient=t.ExperimentConfigurationRequestor=t.constants=t.EppoClient=void 0;const n=r(2665);t.EppoClient=n.default;const s=r(4216);t.constants=s;const o=r(5856);t.ExperimentConfigurationRequestor=o.default;const i=r(1506);t.HttpClient=i.default;const a=r(5751);t.validation=a},778:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodeBase64=t.encodeBase64=t.getMD5Hash=void 0;const n=r(2568);t.getMD5Hash=function(e){return n(e)},t.encodeBase64=function(e){return Buffer.from(e,"utf8").toString("base64")},t.decodeBase64=function(e){return Buffer.from(e,"base64").toString("utf8")}},7370:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findMatchingRule=void 0;const n=r(8186),s=r(778);function o(e,t,r){const o=function(e,t,r){return t.map((t=>r?function(e,t){const r=Object.entries(e).reduce(((e,[t,r])=>Object.assign({[(0,s.getMD5Hash)(t)]:r},e)),{})[t.attribute];if(null!=r)switch(t.operator){case(0,s.getMD5Hash)(n.OperatorType.GTE):return c(r,Number((0,s.decodeBase64)(t.value)),((e,t)=>e>=t));case(0,s.getMD5Hash)(n.OperatorType.GT):return c(r,Number((0,s.decodeBase64)(t.value)),((e,t)=>e>t));case(0,s.getMD5Hash)(n.OperatorType.LTE):return c(r,Number((0,s.decodeBase64)(t.value)),((e,t)=>e<=t));case(0,s.getMD5Hash)(n.OperatorType.LT):return c(r,Number((0,s.decodeBase64)(t.value)),((e,t)=>e<t));case(0,s.getMD5Hash)(n.OperatorType.MATCHES):return new RegExp((0,s.decodeBase64)(t.value)).test(r);case(0,s.getMD5Hash)(n.OperatorType.ONE_OF):return i((0,s.getMD5Hash)(r.toString().toLowerCase()),t.value);case(0,s.getMD5Hash)(n.OperatorType.NOT_ONE_OF):return a((0,s.getMD5Hash)(r.toString().toLowerCase()),t.value)}return!1}(e,t):function(e,t){const r=e[t.attribute];if(null!=r)switch(t.operator){case n.OperatorType.GTE:return c(r,t.value,((e,t)=>e>=t));case n.OperatorType.GT:return c(r,t.value,((e,t)=>e>t));case n.OperatorType.LTE:return c(r,t.value,((e,t)=>e<=t));case n.OperatorType.LT:return c(r,t.value,((e,t)=>e<t));case n.OperatorType.MATCHES:return new RegExp(t.value).test(r);case n.OperatorType.ONE_OF:return i(r.toString().toLowerCase(),t.value.map((e=>e.toLowerCase())));case n.OperatorType.NOT_ONE_OF:return a(r.toString().toLowerCase(),t.value.map((e=>e.toLowerCase())))}return!1}(e,t)))}(e,t.conditions,r);return!o.includes(!1)}function i(e,t){return u(e,t).length>0}function a(e,t){return 0===u(e,t).length}function u(e,t){return t.filter((t=>t===e))}function c(e,t,r){return"number"==typeof e&&"number"==typeof t&&r(e,t)}t.findMatchingRule=function(e,t,r){for(const n of t)if(o(e,n,r))return n;return null}},1112:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isShardInRange=t.getShard=void 0;const n=r(2568);t.getShard=function(e,t){const r=n(e);return parseInt(r.slice(0,8),16)%t},t.isShardInRange=function(e,t){return e>=t.start&&e<t.end}},5751:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateNotBlank=t.InvalidArgumentError=void 0;class r extends Error{}t.InvalidArgumentError=r,t.validateNotBlank=function(e,t){if(null==e||0===e.length)throw new r(t)}},9669:(e,t,r)=>{e.exports=r(1609)},5448:(e,t,r)=>{"use strict";var n=r(4867),s=r(6026),o=r(4372),i=r(5327),a=r(4097),u=r(4109),c=r(7985),l=r(7874),p=r(2648),f=r(644),d=r(205);e.exports=function(e){return new Promise((function(t,r){var h,g=e.data,m=e.headers,v=e.responseType;function y(){e.cancelToken&&e.cancelToken.unsubscribe(h),e.signal&&e.signal.removeEventListener("abort",h)}n.isFormData(g)&&n.isStandardBrowserEnv()&&delete m["Content-Type"];var E=new XMLHttpRequest;if(e.auth){var O=e.auth.username||"",S=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";m.Authorization="Basic "+btoa(O+":"+S)}var T=a(e.baseURL,e.url);function b(){if(E){var n="getAllResponseHeaders"in E?u(E.getAllResponseHeaders()):null,o={data:v&&"text"!==v&&"json"!==v?E.response:E.responseText,status:E.status,statusText:E.statusText,headers:n,config:e,request:E};s((function(e){t(e),y()}),(function(e){r(e),y()}),o),E=null}}if(E.open(e.method.toUpperCase(),i(T,e.params,e.paramsSerializer),!0),E.timeout=e.timeout,"onloadend"in E?E.onloadend=b:E.onreadystatechange=function(){E&&4===E.readyState&&(0!==E.status||E.responseURL&&0===E.responseURL.indexOf("file:"))&&setTimeout(b)},E.onabort=function(){E&&(r(new p("Request aborted",p.ECONNABORTED,e,E)),E=null)},E.onerror=function(){r(new p("Network Error",p.ERR_NETWORK,e,E,E)),E=null},E.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",n=e.transitional||l;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(new p(t,n.clarifyTimeoutError?p.ETIMEDOUT:p.ECONNABORTED,e,E)),E=null},n.isStandardBrowserEnv()){var N=(e.withCredentials||c(T))&&e.xsrfCookieName?o.read(e.xsrfCookieName):void 0;N&&(m[e.xsrfHeaderName]=N)}"setRequestHeader"in E&&n.forEach(m,(function(e,t){void 0===g&&"content-type"===t.toLowerCase()?delete m[t]:E.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(E.withCredentials=!!e.withCredentials),v&&"json"!==v&&(E.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&E.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&E.upload&&E.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(h=function(e){E&&(r(!e||e&&e.type?new f:e),E.abort(),E=null)},e.cancelToken&&e.cancelToken.subscribe(h),e.signal&&(e.signal.aborted?h():e.signal.addEventListener("abort",h))),g||(g=null);var w=d(T);w&&-1===["http","https","file"].indexOf(w)?r(new p("Unsupported protocol "+w+":",p.ERR_BAD_REQUEST,e)):E.send(g)}))}},1609:(e,t,r)=>{"use strict";var n=r(4867),s=r(1849),o=r(321),i=r(7185);var a=function e(t){var r=new o(t),a=s(o.prototype.request,r);return n.extend(a,o.prototype,r),n.extend(a,r),a.create=function(r){return e(i(t,r))},a}(r(5546));a.Axios=o,a.CanceledError=r(644),a.CancelToken=r(4972),a.isCancel=r(6502),a.VERSION=r(7288).version,a.toFormData=r(7675),a.AxiosError=r(2648),a.Cancel=a.CanceledError,a.all=function(e){return Promise.all(e)},a.spread=r(8713),a.isAxiosError=r(6268),e.exports=a,e.exports.default=a},4972:(e,t,r)=>{"use strict";var n=r(644);function s(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;this.promise.then((function(e){if(r._listeners){var t,n=r._listeners.length;for(t=0;t<n;t++)r._listeners[t](e);r._listeners=null}})),this.promise.then=function(e){var t,n=new Promise((function(e){r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}s.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},s.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},s.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},s.source=function(){var e;return{token:new s((function(t){e=t})),cancel:e}},e.exports=s},644:(e,t,r)=>{"use strict";var n=r(2648);function s(e){n.call(this,null==e?"canceled":e,n.ERR_CANCELED),this.name="CanceledError"}r(4867).inherits(s,n,{__CANCEL__:!0}),e.exports=s},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,r)=>{"use strict";var n=r(4867),s=r(5327),o=r(782),i=r(3572),a=r(7185),u=r(4097),c=r(4875),l=c.validators;function p(e){this.defaults=e,this.interceptors={request:new o,response:new o}}p.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=a(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var r=t.transitional;void 0!==r&&c.assertOptions(r,{silentJSONParsing:l.transitional(l.boolean),forcedJSONParsing:l.transitional(l.boolean),clarifyTimeoutError:l.transitional(l.boolean)},!1);var n=[],s=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(s=s&&e.synchronous,n.unshift(e.fulfilled,e.rejected))}));var o,u=[];if(this.interceptors.response.forEach((function(e){u.push(e.fulfilled,e.rejected)})),!s){var p=[i,void 0];for(Array.prototype.unshift.apply(p,n),p=p.concat(u),o=Promise.resolve(t);p.length;)o=o.then(p.shift(),p.shift());return o}for(var f=t;n.length;){var d=n.shift(),h=n.shift();try{f=d(f)}catch(e){h(e);break}}try{o=i(f)}catch(e){return Promise.reject(e)}for(;u.length;)o=o.then(u.shift(),u.shift());return o},p.prototype.getUri=function(e){e=a(this.defaults,e);var t=u(e.baseURL,e.url);return s(t,e.params,e.paramsSerializer)},n.forEach(["delete","get","head","options"],(function(e){p.prototype[e]=function(t,r){return this.request(a(r||{},{method:e,url:t,data:(r||{}).data}))}})),n.forEach(["post","put","patch"],(function(e){function t(t){return function(r,n,s){return this.request(a(s||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:r,data:n}))}}p.prototype[e]=t(),p.prototype[e+"Form"]=t(!0)})),e.exports=p},2648:(e,t,r)=>{"use strict";var n=r(4867);function s(e,t,r,n,s){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),s&&(this.response=s)}n.inherits(s,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var o=s.prototype,i={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){i[e]={value:e}})),Object.defineProperties(s,i),Object.defineProperty(o,"isAxiosError",{value:!0}),s.from=function(e,t,r,i,a,u){var c=Object.create(o);return n.toFlatObject(e,c,(function(e){return e!==Error.prototype})),s.call(c,e.message,t,r,i,a),c.name=e.name,u&&Object.assign(c,u),c},e.exports=s},782:(e,t,r)=>{"use strict";var n=r(4867);function s(){this.handlers=[]}s.prototype.use=function(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1},s.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},s.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=s},4097:(e,t,r)=>{"use strict";var n=r(1793),s=r(7303);e.exports=function(e,t){return e&&!n(t)?s(e,t):t}},3572:(e,t,r)=>{"use strict";var n=r(4867),s=r(8527),o=r(6502),i=r(5546),a=r(644);function u(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new a}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=s.call(e,e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return u(e),t.data=s.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(u(e),t&&t.response&&(t.response.data=s.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},7185:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e,t){t=t||{};var r={};function s(e,t){return n.isPlainObject(e)&&n.isPlainObject(t)?n.merge(e,t):n.isPlainObject(t)?n.merge({},t):n.isArray(t)?t.slice():t}function o(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:s(void 0,e[r]):s(e[r],t[r])}function i(e){if(!n.isUndefined(t[e]))return s(void 0,t[e])}function a(r){return n.isUndefined(t[r])?n.isUndefined(e[r])?void 0:s(void 0,e[r]):s(void 0,t[r])}function u(r){return r in t?s(e[r],t[r]):r in e?s(void 0,e[r]):void 0}var c={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:u};return n.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=c[e]||o,s=t(e);n.isUndefined(s)&&t!==u||(r[e]=s)})),r}},6026:(e,t,r)=>{"use strict";var n=r(2648);e.exports=function(e,t,r){var s=r.config.validateStatus;r.status&&s&&!s(r.status)?t(new n("Request failed with status code "+r.status,[n.ERR_BAD_REQUEST,n.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r)):e(r)}},8527:(e,t,r)=>{"use strict";var n=r(4867),s=r(5546);e.exports=function(e,t,r){var o=this||s;return n.forEach(r,(function(r){e=r.call(o,e,t)})),e}},5546:(e,t,r)=>{"use strict";var n=r(4867),s=r(6016),o=r(2648),i=r(7874),a=r(7675),u={"Content-Type":"application/x-www-form-urlencoded"};function c(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,p={transitional:i,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(l=r(5448)),l),transformRequest:[function(e,t){if(s(t,"Accept"),s(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e))return e;if(n.isArrayBufferView(e))return e.buffer;if(n.isURLSearchParams(e))return c(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var r,o=n.isObject(e),i=t&&t["Content-Type"];if((r=n.isFileList(e))||o&&"multipart/form-data"===i){var u=this.env&&this.env.FormData;return a(r?{"files[]":e}:e,u&&new u)}return o||"application/json"===i?(c(t,"application/json"),function(e,t,r){if(n.isString(e))try{return(t||JSON.parse)(e),n.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(r||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||p.transitional,r=t&&t.silentJSONParsing,s=t&&t.forcedJSONParsing,i=!r&&"json"===this.responseType;if(i||s&&n.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw o.from(e,o.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:r(1623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};n.forEach(["delete","get","head"],(function(e){p.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){p.headers[e]=n.merge(u)})),e.exports=p},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.27.2"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},5327:(e,t,r)=>{"use strict";var n=r(4867);function s(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var o;if(r)o=r(t);else if(n.isURLSearchParams(t))o=t.toString();else{var i=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),i.push(s(t)+"="+s(e))})))})),o=i.join("&")}if(o){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,r)=>{"use strict";var n=r(4867);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,s,o,i){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(s)&&a.push("path="+s),n.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e){return n.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,r)=>{"use strict";var n=r(4867);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function s(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=s(window.location.href),function(t){var r=n.isString(t)?s(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},6016:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},1623:e=>{e.exports=null},4109:(e,t,r)=>{"use strict";var n=r(4867),s=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,o,i={};return e?(n.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=n.trim(e.substr(0,o)).toLowerCase(),r=n.trim(e.substr(o+1)),t){if(i[t]&&s.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}})),i):i}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},7675:(e,t,r)=>{"use strict";var n=r(4867);e.exports=function(e,t){t=t||new FormData;var r=[];function s(e){return null===e?"":n.isDate(e)?e.toISOString():n.isArrayBuffer(e)||n.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(o,i){if(n.isPlainObject(o)||n.isArray(o)){if(-1!==r.indexOf(o))throw Error("Circular reference detected in "+i);r.push(o),n.forEach(o,(function(r,o){if(!n.isUndefined(r)){var a,u=i?i+"."+o:o;if(r&&!i&&"object"==typeof r)if(n.endsWith(o,"{}"))r=JSON.stringify(r);else if(n.endsWith(o,"[]")&&(a=n.toArray(r)))return void a.forEach((function(e){!n.isUndefined(e)&&t.append(u,s(e))}));e(r,u)}})),r.pop()}else t.append(i,s(o))}(e),t}},4875:(e,t,r)=>{"use strict";var n=r(7288).version,s=r(2648),o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));var i={};o.transitional=function(e,t,r){function o(e,t){return"[Axios v"+n+"] Transitional option '"+e+"'"+t+(r?". "+r:"")}return function(r,n,a){if(!1===e)throw new s(o(n," has been removed"+(t?" in "+t:"")),s.ERR_DEPRECATED);return t&&!i[n]&&(i[n]=!0,console.warn(o(n," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,n,a)}},e.exports={assertOptions:function(e,t,r){if("object"!=typeof e)throw new s("options must be an object",s.ERR_BAD_OPTION_VALUE);for(var n=Object.keys(e),o=n.length;o-- >0;){var i=n[o],a=t[i];if(a){var u=e[i],c=void 0===u||a(u,i,e);if(!0!==c)throw new s("option "+i+" must be "+c,s.ERR_BAD_OPTION_VALUE)}else if(!0!==r)throw new s("Unknown option "+i,s.ERR_BAD_OPTION)}},validators:o}},4867:(e,t,r)=>{"use strict";var n,s=r(1849),o=Object.prototype.toString,i=(n=Object.create(null),function(e){var t=o.call(e);return n[t]||(n[t]=t.slice(8,-1).toLowerCase())});function a(e){return e=e.toLowerCase(),function(t){return i(t)===e}}function u(e){return Array.isArray(e)}function c(e){return void 0===e}var l=a("ArrayBuffer");function p(e){return null!==e&&"object"==typeof e}function f(e){if("object"!==i(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var d=a("Date"),h=a("File"),g=a("Blob"),m=a("FileList");function v(e){return"[object Function]"===o.call(e)}var y=a("URLSearchParams");function E(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),u(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.call(null,e[s],s,e)}var O,S=(O="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return O&&e instanceof O});e.exports={isArray:u,isArrayBuffer:l,isBuffer:function(e){return null!==e&&!c(e)&&null!==e.constructor&&!c(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||o.call(e)===t||v(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&l(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:p,isPlainObject:f,isUndefined:c,isDate:d,isFile:h,isBlob:g,isFunction:v,isStream:function(e){return p(e)&&v(e.pipe)},isURLSearchParams:y,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:E,merge:function e(){var t={};function r(r,n){f(t[n])&&f(r)?t[n]=e(t[n],r):f(r)?t[n]=e({},r):u(r)?t[n]=r.slice():t[n]=r}for(var n=0,s=arguments.length;n<s;n++)E(arguments[n],r);return t},extend:function(e,t,r){return E(t,(function(t,n){e[n]=r&&"function"==typeof t?s(t,r):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,r,n){e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,r&&Object.assign(e.prototype,r)},toFlatObject:function(e,t,r){var n,s,o,i={};t=t||{};do{for(s=(n=Object.getOwnPropertyNames(e)).length;s-- >0;)i[o=n[s]]||(t[o]=e[o],i[o]=!0);e=Object.getPrototypeOf(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:a,endsWith:function(e,t,r){e=String(e),(void 0===r||r>e.length)&&(r=e.length),r-=t.length;var n=e.indexOf(t,r);return-1!==n&&n===r},toArray:function(e){if(!e)return null;var t=e.length;if(c(t))return null;for(var r=new Array(t);t-- >0;)r[t]=e[t];return r},isTypedArray:S,isFileList:m}},487:e=>{var t={utf8:{stringToBytes:function(e){return t.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(t.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],r=0;r<e.length;r++)t.push(255&e.charCodeAt(r));return t},bytesToString:function(e){for(var t=[],r=0;r<e.length;r++)t.push(String.fromCharCode(e[r]));return t.join("")}}};e.exports=t},1012:e=>{var t,r;t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&r.rotl(e,8)|4278255360&r.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=r.endian(e[t]);return e},randomBytes:function(e){for(var t=[];e>0;e--)t.push(Math.floor(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],r=0,n=0;r<e.length;r++,n+=8)t[n>>>5]|=e[r]<<24-n%32;return t},wordsToBytes:function(e){for(var t=[],r=0;r<32*e.length;r+=8)t.push(e[r>>>5]>>>24-r%32&255);return t},bytesToHex:function(e){for(var t=[],r=0;r<e.length;r++)t.push((e[r]>>>4).toString(16)),t.push((15&e[r]).toString(16));return t.join("")},hexToBytes:function(e){for(var t=[],r=0;r<e.length;r+=2)t.push(parseInt(e.substr(r,2),16));return t},bytesToBase64:function(e){for(var r=[],n=0;n<e.length;n+=3)for(var s=e[n]<<16|e[n+1]<<8|e[n+2],o=0;o<4;o++)8*n+6*o<=8*e.length?r.push(t.charAt(s>>>6*(3-o)&63)):r.push("=");return r.join("")},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\/]/gi,"");for(var r=[],n=0,s=0;n<e.length;s=++n%4)0!=s&&r.push((t.indexOf(e.charAt(n-1))&Math.pow(2,-2*s+8)-1)<<2*s|t.indexOf(e.charAt(n))>>>6-2*s);return r}},e.exports=r},8738:e=>{function t(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(t(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&t(e.slice(0,0))}(e)||!!e._isBuffer)}},2568:(e,t,r)=>{var n,s,o,i,a;n=r(1012),s=r(487).utf8,o=r(8738),i=r(487).bin,(a=function(e,t){e.constructor==String?e=t&&"binary"===t.encoding?i.stringToBytes(e):s.stringToBytes(e):o(e)?e=Array.prototype.slice.call(e,0):Array.isArray(e)||e.constructor===Uint8Array||(e=e.toString());for(var r=n.bytesToWords(e),u=8*e.length,c=1732584193,l=-271733879,p=-1732584194,f=271733878,d=0;d<r.length;d++)r[d]=16711935&(r[d]<<8|r[d]>>>24)|4278255360&(r[d]<<24|r[d]>>>8);r[u>>>5]|=128<<u%32,r[14+(u+64>>>9<<4)]=u;var h=a._ff,g=a._gg,m=a._hh,v=a._ii;for(d=0;d<r.length;d+=16){var y=c,E=l,O=p,S=f;c=h(c,l,p,f,r[d+0],7,-680876936),f=h(f,c,l,p,r[d+1],12,-389564586),p=h(p,f,c,l,r[d+2],17,606105819),l=h(l,p,f,c,r[d+3],22,-1044525330),c=h(c,l,p,f,r[d+4],7,-176418897),f=h(f,c,l,p,r[d+5],12,1200080426),p=h(p,f,c,l,r[d+6],17,-1473231341),l=h(l,p,f,c,r[d+7],22,-45705983),c=h(c,l,p,f,r[d+8],7,1770035416),f=h(f,c,l,p,r[d+9],12,-1958414417),p=h(p,f,c,l,r[d+10],17,-42063),l=h(l,p,f,c,r[d+11],22,-1990404162),c=h(c,l,p,f,r[d+12],7,1804603682),f=h(f,c,l,p,r[d+13],12,-40341101),p=h(p,f,c,l,r[d+14],17,-1502002290),c=g(c,l=h(l,p,f,c,r[d+15],22,1236535329),p,f,r[d+1],5,-165796510),f=g(f,c,l,p,r[d+6],9,-1069501632),p=g(p,f,c,l,r[d+11],14,643717713),l=g(l,p,f,c,r[d+0],20,-373897302),c=g(c,l,p,f,r[d+5],5,-701558691),f=g(f,c,l,p,r[d+10],9,38016083),p=g(p,f,c,l,r[d+15],14,-660478335),l=g(l,p,f,c,r[d+4],20,-405537848),c=g(c,l,p,f,r[d+9],5,568446438),f=g(f,c,l,p,r[d+14],9,-1019803690),p=g(p,f,c,l,r[d+3],14,-187363961),l=g(l,p,f,c,r[d+8],20,1163531501),c=g(c,l,p,f,r[d+13],5,-1444681467),f=g(f,c,l,p,r[d+2],9,-51403784),p=g(p,f,c,l,r[d+7],14,1735328473),c=m(c,l=g(l,p,f,c,r[d+12],20,-1926607734),p,f,r[d+5],4,-378558),f=m(f,c,l,p,r[d+8],11,-2022574463),p=m(p,f,c,l,r[d+11],16,1839030562),l=m(l,p,f,c,r[d+14],23,-35309556),c=m(c,l,p,f,r[d+1],4,-1530992060),f=m(f,c,l,p,r[d+4],11,1272893353),p=m(p,f,c,l,r[d+7],16,-155497632),l=m(l,p,f,c,r[d+10],23,-1094730640),c=m(c,l,p,f,r[d+13],4,681279174),f=m(f,c,l,p,r[d+0],11,-358537222),p=m(p,f,c,l,r[d+3],16,-722521979),l=m(l,p,f,c,r[d+6],23,76029189),c=m(c,l,p,f,r[d+9],4,-640364487),f=m(f,c,l,p,r[d+12],11,-421815835),p=m(p,f,c,l,r[d+15],16,530742520),c=v(c,l=m(l,p,f,c,r[d+2],23,-995338651),p,f,r[d+0],6,-198630844),f=v(f,c,l,p,r[d+7],10,1126891415),p=v(p,f,c,l,r[d+14],15,-1416354905),l=v(l,p,f,c,r[d+5],21,-57434055),c=v(c,l,p,f,r[d+12],6,1700485571),f=v(f,c,l,p,r[d+3],10,-1894986606),p=v(p,f,c,l,r[d+10],15,-1051523),l=v(l,p,f,c,r[d+1],21,-2054922799),c=v(c,l,p,f,r[d+8],6,1873313359),f=v(f,c,l,p,r[d+15],10,-30611744),p=v(p,f,c,l,r[d+6],15,-1560198380),l=v(l,p,f,c,r[d+13],21,1309151649),c=v(c,l,p,f,r[d+4],6,-145523070),f=v(f,c,l,p,r[d+11],10,-1120210379),p=v(p,f,c,l,r[d+2],15,718787259),l=v(l,p,f,c,r[d+9],21,-343485551),c=c+y>>>0,l=l+E>>>0,p=p+O>>>0,f=f+S>>>0}return n.endian([c,l,p,f])})._ff=function(e,t,r,n,s,o,i){var a=e+(t&r|~t&n)+(s>>>0)+i;return(a<<o|a>>>32-o)+t},a._gg=function(e,t,r,n,s,o,i){var a=e+(t&n|r&~n)+(s>>>0)+i;return(a<<o|a>>>32-o)+t},a._hh=function(e,t,r,n,s,o,i){var a=e+(t^r^n)+(s>>>0)+i;return(a<<o|a>>>32-o)+t},a._ii=function(e,t,r,n,s,o,i){var a=e+(r^(t|~n))+(s>>>0)+i;return(a<<o|a>>>32-o)+t},a._blocksize=16,a._digestsize=16,e.exports=function(e,t){if(null==e)throw new Error("Illegal argument "+e);var r=n.wordsToBytes(a(e,t));return t&&t.asBytes?r:t&&t.asString?i.bytesToString(r):n.bytesToHex(r)}},3302:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EppoLocalStorage=void 0;t.EppoLocalStorage=class{get(e){if(this.hasWindowLocalStorage()){const t=window.localStorage.getItem(e);if(t)return JSON.parse(t)}return null}hasWindowLocalStorage(){try{return"undefined"!=typeof window&&!!window.localStorage}catch(e){return!1}}setEntries(e){this.hasWindowLocalStorage()&&Object.entries(e).forEach((([e,t])=>{window.localStorage.setItem(e,JSON.stringify(t))}))}}},7802:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sdkName=t.sdkVersion=void 0;const n=r(4147);t.sdkVersion=n.version,t.sdkName="js-client-sdk"},4147:e=>{"use strict";e.exports=JSON.parse('{"name":"@eppo/js-client-sdk","version":"1.3.0","description":"Eppo SDK for client-side JavaScript applications","main":"dist/index.js","files":["/dist"],"typings":"dist/js-client-sdk.d.ts","scripts":{"lint":"eslint \'**/*.{ts,tsx}\' \'**/*.d.{ts,tsx}\' --cache","lint:fix":"eslint --fix \'**/*.{ts,tsx}\' --cache","lint:fix-pre-commit":"eslint -c .eslintrc.pre-commit.js --fix \'**/*.{ts,tsx}\' --no-eslintrc --cache","prepare":"make prepare","pre-commit":"lint-staged && tsc && yarn docs","typecheck":"tsc","test":"yarn test:unit","test:unit":"NODE_ENV=test jest \'.*\\\\.spec\\\\.ts\'","docs":"api-documenter markdown -i ./temp -o ./docs"},"jsdelivr":"dist/eppo-sdk.js","repository":{"type":"git","url":"git+https://github.com/Eppo-exp/js-client-sdk.git"},"author":"","license":"MIT","bugs":{"url":"https://github.com/Eppo-exp/js-client-sdk/issues"},"homepage":"https://github.com/Eppo-exp/js-client-sdk#readme","devDependencies":{"@microsoft/api-documenter":"^7.17.17","@microsoft/api-extractor":"^7.25.0","@types/jest":"^28.1.1","@types/md5":"^2.3.2","@typescript-eslint/eslint-plugin":"^5.13.0","@typescript-eslint/parser":"^5.13.0","eslint":"^8.17.0","eslint-config-prettier":"^8.5.0","eslint-import-resolver-typescript":"^2.5.0","eslint-plugin-import":"^2.25.4","eslint-plugin-prettier":"^4.0.0","eslint-plugin-promise":"^6.0.0","husky":"^8.0.1","lint-staged":"^12.3.5","jest":"^28.1.1","jest-environment-jsdom":"^28.1.1","prettier":"^2.7.1","terser-webpack-plugin":"^5.3.3","testdouble":"^3.16.6","ts-jest":"^28.0.5","ts-loader":"^9.3.1","typescript":"^4.7.4","webpack":"^5.73.0","webpack-cli":"^4.10.0","xhr-mock":"^2.5.1"},"dependencies":{"@eppo/js-client-sdk-common":"^1.6.0","axios":"^0.27.2","md5":"^2.3.0"}}')}},t={};function r(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}var n={};(()=>{"use strict";var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.getInstance=e.init=e.EppoJSClient=void 0;const t=r(5541),s=r(9669),o=r(3302),i=r(7802),a=new o.EppoLocalStorage;class u extends t.EppoClient{getAssignment(e,t,r,n){return super.getAssignment(e,t,r,n,!0)}getStringAssignment(e,t,r,n){return super.getStringAssignment(e,t,r,n,!0)}getBoolAssignment(e,t,r,n){return super.getBoolAssignment(e,t,r,n,!0)}getNumericAssignment(e,t,r,n){return super.getNumericAssignment(e,t,r,n,!0)}getJSONStringAssignment(e,t,r,n){return super.getJSONStringAssignment(e,t,r,n,!0)}getParsedJSONAssignment(e,t,r,n){return super.getParsedJSONAssignment(e,t,r,n,!0)}}e.EppoJSClient=u,u.instance=new u(a),e.init=async function(e){t.validation.validateNotBlank(e.apiKey,"API key required");const r=s.default.create({baseURL:e.baseUrl||t.constants.BASE_URL,timeout:t.constants.REQUEST_TIMEOUT_MILLIS}),n=new t.HttpClient(r,{apiKey:e.apiKey,sdkName:i.sdkName,sdkVersion:i.sdkVersion});u.instance.setLogger(e.assignmentLogger);const o=new t.ExperimentConfigurationRequestor(a,n);return await o.fetchAndStoreConfigurations(),u.instance},e.getInstance=function(){return u.instance}})(),eppo=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,