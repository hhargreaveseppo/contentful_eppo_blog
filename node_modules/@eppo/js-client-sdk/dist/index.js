"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstance = exports.init = exports.EppoJSClient = void 0;
const js_client_sdk_common_1 = require("@eppo/js-client-sdk-common");
const axios_1 = require("axios");
const local_storage_1 = require("./local-storage");
const sdk_data_1 = require("./sdk-data");
const localStorage = new local_storage_1.EppoLocalStorage();
/**
 * Client for assigning experiment variations.
 * @public
 */
class EppoJSClient extends js_client_sdk_common_1.EppoClient {
    getAssignment(subjectKey, flagKey, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    subjectAttributes, assignmentHooks) {
        return super.getAssignment(subjectKey, flagKey, subjectAttributes, assignmentHooks, true);
    }
    getStringAssignment(subjectKey, flagKey, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    subjectAttributes, assignmentHooks) {
        return super.getStringAssignment(subjectKey, flagKey, subjectAttributes, assignmentHooks, true);
    }
    getBoolAssignment(subjectKey, flagKey, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    subjectAttributes, assignmentHooks) {
        return super.getBoolAssignment(subjectKey, flagKey, subjectAttributes, assignmentHooks, true);
    }
    getNumericAssignment(subjectKey, flagKey, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    subjectAttributes, assignmentHooks) {
        return super.getNumericAssignment(subjectKey, flagKey, subjectAttributes, assignmentHooks, true);
    }
    getJSONStringAssignment(subjectKey, flagKey, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    subjectAttributes, assignmentHooks) {
        return super.getJSONStringAssignment(subjectKey, flagKey, subjectAttributes, assignmentHooks, true);
    }
    getParsedJSONAssignment(subjectKey, flagKey, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    subjectAttributes, assignmentHooks) {
        return super.getParsedJSONAssignment(subjectKey, flagKey, subjectAttributes, assignmentHooks, true);
    }
}
exports.EppoJSClient = EppoJSClient;
EppoJSClient.instance = new EppoJSClient(localStorage);
/**
 * Initializes the Eppo client with configuration parameters.
 * This method should be called once on application startup.
 * @param config - client configuration
 * @public
 */
async function init(config) {
    js_client_sdk_common_1.validation.validateNotBlank(config.apiKey, 'API key required');
    const axiosInstance = axios_1.default.create({
        baseURL: config.baseUrl || js_client_sdk_common_1.constants.BASE_URL,
        timeout: js_client_sdk_common_1.constants.REQUEST_TIMEOUT_MILLIS,
    });
    const httpClient = new js_client_sdk_common_1.HttpClient(axiosInstance, {
        apiKey: config.apiKey,
        sdkName: sdk_data_1.sdkName,
        sdkVersion: sdk_data_1.sdkVersion,
    });
    EppoJSClient.instance.setLogger(config.assignmentLogger);
    const configurationRequestor = new js_client_sdk_common_1.ExperimentConfigurationRequestor(localStorage, httpClient);
    await configurationRequestor.fetchAndStoreConfigurations();
    return EppoJSClient.instance;
}
exports.init = init;
/**
 * Used to access a singleton SDK client instance.
 * Use the method after calling init() to initialize the client.
 * @returns a singleton client instance
 * @public
 */
function getInstance() {
    return EppoJSClient.instance;
}
exports.getInstance = getInstance;
//# sourceMappingURL=index.js.map