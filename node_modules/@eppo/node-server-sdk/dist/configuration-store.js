"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.commonCompatibleConfigurationStore = exports.InMemoryConfigurationStore = void 0;
const lru_cache_1 = require("lru-cache");
/**
 * Default ConfigurationStore implementation. Sets and retrieves entries from an in-memory cache.
 */
class InMemoryConfigurationStore {
    constructor(maxEntries) {
        this.cache = new lru_cache_1.LRUCache({ max: maxEntries });
    }
    getConfiguration(key) {
        var _a;
        return (_a = this.cache.get(key)) !== null && _a !== void 0 ? _a : null;
    }
    setConfigurations(entries) {
        Object.entries(entries).forEach(([key, val]) => {
            this.cache.set(key, val);
        });
    }
}
exports.InMemoryConfigurationStore = InMemoryConfigurationStore;
class commonCompatibleConfigurationStore {
    constructor(store) {
        this.store = store;
    }
    get(key) {
        return this.store.getConfiguration(key);
    }
    setEntries(entries) {
        this.store.setConfigurations(entries);
    }
}
exports.commonCompatibleConfigurationStore = commonCompatibleConfigurationStore;
//# sourceMappingURL=configuration-store.js.map