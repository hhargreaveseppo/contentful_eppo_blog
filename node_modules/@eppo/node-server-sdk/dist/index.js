"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstance = exports.init = void 0;
const js_client_sdk_common_1 = require("@eppo/js-client-sdk-common");
const axios_1 = require("axios");
const eppo_client_1 = require("./client/eppo-client");
const configuration_store_1 = require("./configuration-store");
const constants_1 = require("./constants");
const experiment_configuration_requestor_1 = require("./experiment-configuration-requestor");
const http_client_1 = require("./http-client");
const poller_1 = require("./poller");
const sdk_data_1 = require("./sdk-data");
let poller;
let clientInstance;
/**
 * Initializes the Eppo client with configuration parameters.
 * This method should be called once on application startup.
 * After invocation of this method, the SDK will poll Eppo's API at regular intervals to retrieve assignment configurations.
 * @param config client configuration
 * @public
 */
async function init(config) {
    js_client_sdk_common_1.validation.validateNotBlank(config.apiKey, 'API key required');
    const configurationStore = new configuration_store_1.InMemoryConfigurationStore(constants_1.MAX_CACHE_ENTRIES);
    const axiosInstance = axios_1.default.create({
        baseURL: config.baseUrl || js_client_sdk_common_1.constants.BASE_URL,
        timeout: js_client_sdk_common_1.constants.REQUEST_TIMEOUT_MILLIS,
    });
    const httpClient = new http_client_1.default(axiosInstance, {
        apiKey: config.apiKey,
        sdkName: sdk_data_1.sdkName,
        sdkVersion: sdk_data_1.sdkVersion,
    });
    const configurationRequestor = new experiment_configuration_requestor_1.default(configurationStore, httpClient);
    if (poller) {
        // if a client was already initialized, stop the polling process from the previous init call
        poller.stop();
    }
    poller = (0, poller_1.default)(constants_1.POLL_INTERVAL_MILLIS, configurationRequestor.fetchAndStoreConfigurations.bind(configurationRequestor));
    clientInstance = new eppo_client_1.default(configurationRequestor, poller);
    clientInstance.setLogger(config.assignmentLogger);
    // default to LRU cache with 50_000 entries.
    // we estimate this will use no more than 10 MB of memory
    // and should be appropriate for most server-side use cases.
    clientInstance.useLRUAssignmentCache(50000);
    await poller.start();
    return clientInstance;
}
exports.init = init;
/**
 * Used to access a singleton SDK client instance.
 * Use the method after calling init() to initialize the client.
 * @returns a singleton client instance
 */
function getInstance() {
    if (!clientInstance) {
        throw Error('Expected init() to be called to initialize a client instance');
    }
    return clientInstance;
}
exports.getInstance = getInstance;
//# sourceMappingURL=index.js.map