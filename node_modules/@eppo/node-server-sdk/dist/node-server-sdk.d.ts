import { AxiosInstance } from 'axios';
import { EppoClient } from '@eppo/js-client-sdk-common';
import { ExperimentConfigurationRequestor } from '@eppo/js-client-sdk-common';
import { HttpClient } from '@eppo/js-client-sdk-common';
import { IAssignmentEvent } from '@eppo/js-client-sdk-common';
import { IAssignmentLogger } from '@eppo/js-client-sdk-common';
import { IConfigurationStore } from '@eppo/js-client-sdk-common';
import { IEppoClient as IEppoClient_2 } from '@eppo/js-client-sdk-common';

declare class EppoHttpClient extends HttpClient {
    isUnauthorized: boolean;
    constructor(axiosInstance: AxiosInstance, sdkParams: ISdkParams);
    get<T>(resource: string): Promise<T | undefined>;
    private _handleHttpError;
}

declare class EppoNodeClient extends EppoClient implements IEppoClient_2 {
    private poller;
    constructor(configurationRequestor: EppoNodeExperimentConfigurationRequestor, poller: IPoller);
    stopPolling(): void;
}

declare class EppoNodeExperimentConfigurationRequestor extends ExperimentConfigurationRequestor {
    configStore: IConfigurationStore;
    constructor(configurationStore: IEppoConfigurationStore, httpClient: EppoHttpClient);
}

/**
 * Used to access a singleton SDK client instance.
 * Use the method after calling init() to initialize the client.
 * @returns a singleton client instance
 */
export declare function getInstance(): IEppoClient;

export { IAssignmentEvent }

export { IAssignmentLogger }

/**
 * Configuration used for initializing the Eppo client
 * @public
 */
export declare interface IClientConfig {
    /**
     * Eppo API key
     */
    apiKey: string;
    /**
     * Base URL of the Eppo API.
     * Clients should use the default setting in most cases.
     */
    baseUrl?: string;
    /**
     * Pass a logging implementation to send variation assignments to your data warehouse.
     */
    assignmentLogger: IAssignmentLogger;
}

export declare interface IEppoClient extends EppoNodeClient {
    /**
     * Used to manually stop the polling of Eppo servers for testing.
     */
    stopPolling(): void;
}

declare interface IEppoConfigurationStore {
    getConfiguration<T>(key: string): T;
    setConfigurations<T>(entries: Record<string, T>): void;
}

/**
 * Initializes the Eppo client with configuration parameters.
 * This method should be called once on application startup.
 * After invocation of this method, the SDK will poll Eppo's API at regular intervals to retrieve assignment configurations.
 * @param config client configuration
 * @public
 */
export declare function init(config: IClientConfig): Promise<IEppoClient>;

declare interface IPoller {
    start: () => Promise<void>;
    stop: () => void;
}

declare interface ISdkParams {
    apiKey: string;
    sdkVersion: string;
    sdkName: string;
}

export { }
